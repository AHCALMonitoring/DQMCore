  /// \file DQMRun.cc
/*
 *
 * DQMRun.cc source template automatically generated by a class generator
 * Creation date : dim. mars 29 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMDataStream.h"

namespace dqm4hep
{

//-------------------------------------------------------------------------------------------------

DQMRun::DQMRun(int runNumber, const std::string &description, const std::string &detectorName) :
		m_runNumber(runNumber),
		m_description(description),
		m_detectorName(detectorName),
		m_startTime(time(0)),
		m_endTime(0)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMRun::~DQMRun() 
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMRun::serialize(DQMDataStream *const pDataStream) const
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(static_cast<dqm_int>(m_runNumber)));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(static_cast<dqm_uint>(m_startTime)));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(static_cast<dqm_uint>(m_endTime)));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(m_detectorName));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(m_description));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(static_cast<dqm_uint>(this->getNParameters())));

	for(std::map<std::string, std::string>::const_iterator iter = m_parametersMap.begin(), endIter = m_parametersMap.end() ;
			endIter != iter ; ++iter)
	{
		RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(iter->first));
		RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->write(iter->second));
	}

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMRun::deserialize(DQMDataStream *const pDataStream)
{
	dqm_int runNumber = 0;
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(runNumber));
	m_runNumber = runNumber;

	dqm_uint startTime = 0;
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(startTime));
	m_startTime = startTime;

	dqm_uint endTime = 0;
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(endTime));
	m_endTime = endTime;

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(m_detectorName));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(m_description));

	dqm_uint nParameters = 0;
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(nParameters));

	for(unsigned int i=0 ; i<nParameters ; i++)
	{
		std::string key;
		std::string value;

		RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(key));
		RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pDataStream->read(value));

		m_parametersMap[key] = value;
	}

	return STATUS_CODE_SUCCESS;
}

} 

