/*
 *
 * DQMEventCollector.cc source template automatically generated by a class generator
 * Creation date : mer. sept. 9 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMEventCollector.h"
#include "dqm4hep/DQMDimEventCollector.h"

namespace dqm4hep
{

DQMEventCollector::DQMEventCollector()
{
	// default implementation is the DIM one
	m_pCollectorImp = new DQMDimEventCollector();
}

//-------------------------------------------------------------------------------------------------

DQMEventCollector::DQMEventCollector(DQMEventCollectorImp *pCollectorImp) :
		m_pCollectorImp(pCollectorImp)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMEventCollector::~DQMEventCollector()
{
	delete m_pCollectorImp;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMEventCollector::setCollectorName(const std::string &collectorName)
{
	return m_pCollectorImp->setCollectorName(collectorName);
}

//-------------------------------------------------------------------------------------------------

const std::string &DQMEventCollector::getCollectorName() const
{
	return m_pCollectorImp->getCollectorName();
}

//-------------------------------------------------------------------------------------------------

bool DQMEventCollector::isRunning() const
{
	return m_pCollectorImp->isRunning();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMEventCollector::startCollector()
{
	return m_pCollectorImp->startCollector();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMEventCollector::stopCollector()
{
	return m_pCollectorImp->stopCollector();
}

//-------------------------------------------------------------------------------------------------

void DQMEventCollector::setEventCollectorImp(DQMEventCollectorImp *pCollectorImp)
{
	if(NULL == pCollectorImp)
		return;

	delete m_pCollectorImp;
	m_pCollectorImp = pCollectorImp;
}

//-------------------------------------------------------------------------------------------------

void DQMEventCollector::setEventStreamer(DQMEventStreamer *pEventStreamer)
{
	m_pCollectorImp->setEventStreamer(pEventStreamer);
}

//-------------------------------------------------------------------------------------------------

DQMEventStreamer *DQMEventCollector::getEventStreamer() const
{
	return m_pCollectorImp->getEventStreamer();
}

}
