  /// \file DQMDimRunControlClient.cc
/*
 *
 * DQMDimRunControlClient.cc source template automatically generated by a class generator
 * Creation date : mer. nov. 12 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMDimRunControlClient.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMLogging.h"
#include "dqm4hep/DQMRunControl.h"
#include "dqm4hep/DQMDataStream.h"

namespace dqm4hep
{

// run control client plugin declaration
DQM_PLUGIN_DECL( DQMDimRunControlClient , "DimRunControlClient" )

DQMDimRunControlClient::DQMDimRunControlClient() :
		m_isConnected(false),
		m_pStartOfRunInfo(NULL),
		m_pEndOfRunInfo(NULL),
		m_dataStream(1024) // 1 ko to start
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMDimRunControlClient::~DQMDimRunControlClient()
{
	if(isConnectedToService())
		disconnectFromService();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMDimRunControlClient::connectToService()
{
	if(isConnectedToService())
		return STATUS_CODE_SUCCESS;

	std::string sorServiceName = "DQM4HEP/RunControl/" + this->getName() + "/START_OF_RUN";
	std::string eorServiceName = "DQM4HEP/RunControl/" + this->getName() + "/END_OF_RUN";

	m_pStartOfRunInfo = new DimInfo(sorServiceName.c_str(), (void*) "", 0, this);
	m_pEndOfRunInfo = new DimInfo(eorServiceName.c_str(), (void*) "", 0, this);

	m_isConnected = true;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMDimRunControlClient::disconnectFromService()
{
	if(!isConnectedToService())
		return STATUS_CODE_SUCCESS;

	delete m_pStartOfRunInfo; m_pStartOfRunInfo = NULL;
	delete m_pEndOfRunInfo; m_pEndOfRunInfo = NULL;

	m_isConnected = false;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

bool DQMDimRunControlClient::isConnectedToService() const
{
	return m_isConnected;
}

//-------------------------------------------------------------------------------------------------

void DQMDimRunControlClient::infoHandler()
{
	DimInfo *pCurrentDimInfo = getInfo();

	if(m_pStartOfRunInfo == pCurrentDimInfo)
	{
		dqm_char *pBuffer = static_cast<dqm_char*>(pCurrentDimInfo->getData());
		dqm_uint  bufferSize = pCurrentDimInfo->getSize();

		if(pBuffer == NULL || bufferSize == 0)
			return;

		m_dataStream.reset();
		m_dataStream.setBuffer(pBuffer, bufferSize);

		DQMRun *pRun = new DQMRun();

		try
		{
			THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, pRun->deserialize(&m_dataStream));

			if(pRun->getRunNumber() < 0)
				throw StatusCodeException(STATUS_CODE_INVALID_PARAMETER);

			// run is adopted here by the run control. No need to delete
			THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControl->startNewRun(pRun));
		}
		catch(StatusCodeException &exception)
		{
			if(pRun)
				delete pRun;
		}
	}
	else if(m_pEndOfRunInfo == pCurrentDimInfo)
	{
		try
		{
			if(this->isRunning())
				THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->endCurrentRun());
		}
		catch(StatusCodeException &exception)
		{
			streamlog_out(WARNING) << "Couldn't stop the run (at stop)" << exception.toString() << std::endl;
			return;
		}
	}
	else
	{
		streamlog_out(WARNING) << "Unknown info handled by the run control client : " << pCurrentDimInfo->getName() << std::endl;
	}
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMDimRunControlClient::setName(const std::string &name)
{
	if(isConnectedToService())
		return STATUS_CODE_NOT_ALLOWED;

	return DQMRunControl::setName(name);
}

} 

