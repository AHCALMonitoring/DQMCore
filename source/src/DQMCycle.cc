  /// \file DQMCycle.cc
/*
 *
 * DQMCycle.cc source template automatically generated by a class generator
 * Creation date : ven. sept. 5 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMCycle.h"

namespace dqm4hep
{

DQMCycle::DQMCycle() :
		m_pApplication(NULL),
		m_processingRate(0.f),
		m_cycleValue(0.f),
		m_cycleTimeout(10) // 10 seconds is the default value
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMCycle::~DQMCycle()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

float DQMCycle::getCycleValue() const
{
	return m_cycleValue;
}

//-------------------------------------------------------------------------------------------------

void DQMCycle::setCycleValue(float value)
{
	m_cycleValue = value;
}

//-------------------------------------------------------------------------------------------------

unsigned int DQMCycle::getTimeout() const
{
	return m_cycleTimeout;
}

//-------------------------------------------------------------------------------------------------

void DQMCycle::setTimeout(unsigned int timeout)
{
	m_cycleTimeout = timeout;
}

//-------------------------------------------------------------------------------------------------

void DQMCycle::setModuleApplication(DQMModuleApplication *pApplication)
{
	m_pApplication = pApplication;
}

//-------------------------------------------------------------------------------------------------

DQMModuleApplication *DQMCycle::getModuleApplication() const
{
	return m_pApplication;
}

//-------------------------------------------------------------------------------------------------

float DQMCycle::getProcessingRate() const
{
	return m_processingRate;
}

} 

