  /// \file DQMModuleApi.cc
/*
 *
 * DQMModuleApi.cc source template automatically generated by a class generator
 * Creation date : ven. oct. 31 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMModuleApplication.h"
#include "dqm4hep/DQMLogging.h"
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMMonitorElementManager.h"
#include "dqm4hep/DQMStorage.h"
#include "dqm4hep/DQMDirectory.h"
#include "dqm4hep/DQMModule.h"
#include "dqm4hep/DQMArchiver.h"
#include "dqm4hep/tinyxml.h"

namespace dqm4hep
{

void DQMModuleApi::cd(const DQMModule *const pModule)
{
	pModule->getModuleApplication()->getMonitorElementManager()->cd();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::cd(const DQMModule *const pModule, const std::string &dirName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->cd(dirName);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::mkdir(const DQMModule *const pModule, const std::string &dirName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->mkdir(dirName);
}

//-------------------------------------------------------------------------------------------------

void DQMModuleApi::ls(const DQMModule *const pModule, bool recursive)
{
	pModule->getModuleApplication()->getMonitorElementManager()->ls(recursive);
}

//-------------------------------------------------------------------------------------------------

const std::string &DQMModuleApi::pwd(const DQMModule *const pModule)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->pwd();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::goUp(const DQMModule *const pModule)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->goUp();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::rmdir(const DQMModule *const pModule, const std::string &dirName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->rmdir(dirName);
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookRealHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookRealHistogram1D(pMonitorElement, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookIntHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookIntHistogram1D(pMonitorElement, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookCharHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookCharHistogram1D(pMonitorElement, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookShortHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookShortHistogram1D(pMonitorElement, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookRealHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookRealHistogram2D(pMonitorElement, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookIntHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookIntHistogram2D(pMonitorElement, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookCharHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookCharHistogram2D(pMonitorElement, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookShortHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookShortHistogram2D(pMonitorElement, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookProfile1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookProfile1D(pMonitorElement, name, title, pModule->getName(), nXBins, xMin, xMax, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookProfile2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax,
		float zMin, float zMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookProfile2D(pMonitorElement, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax, zMin, zMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookInt(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const int &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookInt(pMonitorElement, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookFloat(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const float &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookFloat(pMonitorElement, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookShort(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const short &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookShort(pMonitorElement, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookString(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookString(pMonitorElement, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}


//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookObject(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement,
		const std::string &name, const std::string &title, TObject *pROOTObject)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookObject(pMonitorElement, name, title, pModule->getName(), pROOTObject));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookRealHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookRealHistogram1D(pMonitorElement, dirName, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookIntHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookIntHistogram1D(pMonitorElement, dirName, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookCharHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookCharHistogram1D(pMonitorElement, dirName, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookShortHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, int nBins, float minimum, float maximum)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookShortHistogram1D(pMonitorElement, dirName, name, title, pModule->getName(), nBins, minimum, maximum));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookRealHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookRealHistogram2D(pMonitorElement, dirName, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookIntHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookIntHistogram2D(pMonitorElement, dirName, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookCharHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookCharHistogram2D(pMonitorElement, dirName, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookShortHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookShortHistogram2D(pMonitorElement, dirName, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookProfile1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax, float yMin, float yMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookProfile1D(pMonitorElement, dirName, name, title, pModule->getName(), nXBins, xMin, xMax, yMin, yMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookProfile2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title,
		int nXBins, float xMin, float xMax,
		int nYBins, float yMin, float yMax,
		float zMin, float zMax)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookProfile2D(pMonitorElement, dirName, name, title, pModule->getName(), nXBins, xMin, xMax, nYBins, yMin, yMax, zMin, zMax));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookInt(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, const int &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookInt(pMonitorElement, dirName, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookFloat(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, const float &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookFloat(pMonitorElement, dirName, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookShort(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, const short &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookShort(pMonitorElement, dirName, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookString(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &dirName, const std::string &name, const std::string &title, const std::string &value)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookString(pMonitorElement, dirName, name, title, pModule->getName(), value));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookObject(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement,
		const std::string &dirName, const std::string &name, const std::string &title, TObject *pROOTObject)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookObject(pMonitorElement, dirName, name, title, pModule->getName(), pROOTObject));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::getAllMonitorElements(const DQMModule *const pModule, std::vector<DQMMonitorElement*> &monitorElementList)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->getAllMonitorElements(monitorElementList);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::getMonitorElement(const DQMModule *const pModule, const std::string &monitorElementName, DQMMonitorElement *&pMonitorElement)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->getMonitorElement(monitorElementName, pMonitorElement);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::getMonitorElement(const DQMModule *const pModule, const std::string &dirName, const std::string &monitorElementName, DQMMonitorElement *&pMonitorElement)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->getMonitorElement(dirName, monitorElementName, pMonitorElement);
}

//-------------------------------------------------------------------------------------------------

DQMMonitorElement *DQMModuleApi::getMonitorElement(const DQMModule *const pModule, const std::string &monitorElementName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->getMonitorElement(monitorElementName);
}

//-------------------------------------------------------------------------------------------------

DQMMonitorElement *DQMModuleApi::getMonitorElement(const DQMModule *const pModule, const std::string &dirName, const std::string &monitorElementName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->getMonitorElement(dirName, monitorElementName);
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::deleteMonitorElement(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement)
{
	std::string fullName = (pMonitorElement->getPath() + pMonitorElement->getName()).getPath();
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->deleteMonitorElement(pMonitorElement));
	pModule->getModuleApplication()->getMonitorElementSender()->removeAvailableMonitorElement(fullName);

	return STATUS_CODE_SUCCESS;
}

////-------------------------------------------------------------------------------------------------
//
//StatusCode DQMModuleApi::deleteMonitorElement(const DQMModule *const pModule, const std::string &dirName, const std::string &monitorElementName)
//{
//	std::string fullName = DQMPath(dir) +
//	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->deleteMonitorElement(dirName, monitorElementName));
//	pModule->getModuleApplication()->getMonitorElementSender()->removeAvailableMonitorElement(pMonitorElement);
//
//	return STATUS_CODE_SUCCESS;
//}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::resetMonitorElements(const DQMModule *const pModule, DQMResetPolicy policy)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->resetMonitorElements(policy);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::resetMonitorElements(const DQMModule *const pModule)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->resetMonitorElements();
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::registerQualityTestFactory(const DQMModule *const pModule, const std::string &qualityTestFactoryName, const DQMQualityTestFactory *const pQualityTestFactory)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->registerQualityTestFactory(qualityTestFactoryName, pQualityTestFactory);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::createQualityTest(const DQMModule *const pModule, TiXmlElement *const pXmlElement)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->createQualityTest(pXmlElement);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::addQualityTest(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement, const std::string &qualityTestName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->addQualityTest(pMonitorElement, qualityTestName);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::runQualityTests(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->runQualityTests(pMonitorElement);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::runQualityTest(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement, const std::string &qualityTestName)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->runQualityTest(pMonitorElement, qualityTestName);
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::runQualityTests(const DQMModule *const pModule)
{
	return pModule->getModuleApplication()->getMonitorElementManager()->runQualityTests();
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMModuleApi::bookMonitorElement(const DQMModule *const pModule, const TiXmlElement *const pXmlElement, DQMMonitorElement *&pMonitorElement)
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, pModule->getModuleApplication()->getMonitorElementManager()->bookMonitorElement(pXmlElement, pModule->getName(), pMonitorElement));
	pModule->getModuleApplication()->getMonitorElementSender()->addAvailableMonitorElement(pMonitorElement);

	return STATUS_CODE_SUCCESS;
}

} 

