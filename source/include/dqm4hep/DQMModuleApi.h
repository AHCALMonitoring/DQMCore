  /// \file DQMModuleApi.h
/*
 *
 * DQMModuleApi.h header template automatically generated by a class generator
 * Creation date : ven. oct. 31 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMODULEAPI_H
#define DQMMODULEAPI_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- root headers
#include "TH1F.h"
#include "TH1I.h"
#include "TH1S.h"
#include "TH1C.h"
#include "TH2F.h"
#include "TH2I.h"
#include "TH2S.h"
#include "TH2C.h"
#include "TProfile.h"
#include "TProfile2D.h"
#include "TObject.h"
#include "TClass.h"

namespace dqm4hep
{

class DQMModule;
class DQMModuleApplication;
class DQMMonitorElement;
class DQMQualityTestFactory;
class DQMQualityTest;
class DQMArchiver;
class TiXmlElement;

/** DQMModuleApi class.
 *
 *  Responsible for direct operation on module application and modules such as monitor
 *  element booking and directory navigation. Monitor element booking should be done via
 *  a DQMModule.
 *
 *  Example :
 *
 *  \code
 *    DQMMonitorElement *pMyRealHistogram1DElement = NULL;
 *    DQMModuleApi::bookRealHistogram1D(this, pMyRealHistogram1DElement, "MyHisto", "My histo title", 10, 1, 10);
 *  \endcode
 */ 
class DQMModuleApi
{
public:

	/////////////////////////
	// DIRECTORY INTERFACE //
	/////////////////////////

	/** Go back to root directory
	 */
	static void cd(const DQMModule *const pModule);

	/** Go to directory 'dirName'
	 */
	static StatusCode cd(const DQMModule *const pModule, const std::string &dirName);

	/** Create the directory 'dirName'
	 */
	static StatusCode mkdir(const DQMModule *const pModule, const std::string &dirName);

	/** List the current directory content
	 */
	static void ls(const DQMModule *const pModule, bool recursive = false);

	/** Get the current directory name
	 */
	static const std::string &pwd(const DQMModule *const pModule);

	/** Navigate backward in the directory structure
	 */
	static StatusCode goUp(const DQMModule *const pModule);

	/** Remove the directory 'dirName'
	 */
	static StatusCode rmdir(const DQMModule *const pModule, const std::string &dirName);

public:

	///////////////////////
	// BOOKING INTERFACE //
	///////////////////////

	/** Book a 1D float histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookRealHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 1D integer histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookIntHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 1D char histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookCharHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 1D short histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookShortHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 2D float histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookRealHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 2D integer histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookIntHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 2D char histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookCharHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 2D short histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookShortHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 1D profile. The profile is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookProfile1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax, float yMin, float yMax);

	/** Book a 2D profile. The profile is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookProfile2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax,
			float zMin, float zMax);

	/** Book an integer scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookInt(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const int &value);

	/** Book a float scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookFloat(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const float &value);

	/** Book a short scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookShort(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const short &value);

	/** Book a std::string scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  and added to monitor element list of the module.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookString(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &value);

	/** Book a generic TObject. The TObject must be valid and must be a built-in ROOT object or
	 *  a user defined class inheriting from TObject and providing a dictionary.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookObject(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title,
			TObject *pROOTObject);



	/** Book a 1D float histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookRealHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 1D integer histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookIntHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 1D char histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookCharHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 1D short histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookShortHistogram1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, int nBins, float minimum, float maximum);

	/** Book a 2D float histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookRealHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 2D integer histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookIntHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 2D char histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookCharHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 2D short histogram. The histogram is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookShortHistogram2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax);

	/** Book a 1D profile. The profile is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookProfile1D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax, float yMin, float yMax);

	/** Book a 2D profile. The profile is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookProfile2D(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			int nXBins, float xMin, float xMax,
			int nYBins, float yMin, float yMax,
			float zMin, float zMax);

	/** Book an integer scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookInt(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, const int &value);

	/** Book a float scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookFloat(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, const float &value);

	/** Book a short scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookShort(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, const short &value);

	/** Book a std::string scalar element. The scalar is encapsulated in the DQMMonitorElement
	 *  Such a function should be used in DQMModule implementation
	 */
	static StatusCode bookString(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title, const std::string &value);

	/** Book a generic TObject. The TObject must be valid and must be a built-in ROOT object or
	 *  a user defined class inheriting from TObject and providing a dictionary.
	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
	 */
	static StatusCode bookObject(const DQMModule *const pModule, DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
			TObject *pROOTObject);


	///////////////////////
	// GETTERS INTERFACE //
	///////////////////////

	/** Get all the monitor elements already booked by this module in all the directories
	 */
	static StatusCode getAllMonitorElements(const DQMModule *const pModule, std::vector<DQMMonitorElement*> &monitorElementList);

	/** Get the monitor element in the current directory (result by ptr reference)
	 */
	static StatusCode getMonitorElement(const DQMModule *const pModule, const std::string &monitorElementName, DQMMonitorElement *&pMonitorElement);

	/** Get the monitor element in the given directory (result by ptr reference)
	 */
	static StatusCode getMonitorElement(const DQMModule *const pModule, const std::string &dirName, const std::string &monitorElementName, DQMMonitorElement *&pMonitorElement);

	/** Get the monitor element in the current directory.
	 *  The element is directly returned without any ptr check
	 */
	static DQMMonitorElement *getMonitorElement(const DQMModule *const pModule, const std::string &monitorElementName);

	/** Get the monitor element in the given directory.
	 *  The element is directly returned without any ptr check
	 */
	static DQMMonitorElement *getMonitorElement(const DQMModule *const pModule, const std::string &dirName, const std::string &monitorElementName);


	////////////////////////
	// DELETION INTERFACE //
	////////////////////////

	/** Delete the monitor element (by element ptr)
	 */
	static StatusCode deleteMonitorElement(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement);

//	/** Delete the monitor element (by element name)
//	 */
//	static StatusCode deleteMonitorElement(const DQMModule *const pModule, const std::string &dirName, const std::string &monitorElement);

public:

	////////////////////////////
	// QUALITY TEST INTERFACE //
	////////////////////////////

	/** Register a new quality test factory.
	 *
	 *  Must be called while reading module settings and before
	 *  calling DQMModuleApi::createQualityTest()
	 */
	static StatusCode registerQualityTestFactory(const DQMModule *const pModule, const std::string &qualityTestFactoryName, const DQMQualityTestFactory *const pQualityTestFactory);

 	/** Create a quality test from the xml element.
 	 *  The xml element must contain the attribute 'type' and 'name'
	 */
	static StatusCode createQualityTest(const DQMModule *const pModule, TiXmlElement *const pXmlElement);

	/** Add a quality test to a given monitor element.
	 *
	 *  The quality test must have been registered in the framework before
	 *  calling this method.
	 */
	static StatusCode addQualityTest(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement, const std::string &qualityTestName);

	/** Run all the quality test attached to this monitor element
	 */
	static StatusCode runQualityTests(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement);

	/** Run a specific quality test attached to this monitor element
	 */
	static StatusCode runQualityTest(const DQMModule *const pModule, DQMMonitorElement *pMonitorElement, const std::string &qualityTestName);

	/** Run all the quality test of all the monitor elements of this module
	 */
	static StatusCode runQualityTests(const DQMModule *const pModule);

public:

	////////////////////////
	// UITILITY FUNCTIONS //
	////////////////////////

	/** Reset all the monitor elements that have the given reset policy
	 */
	static StatusCode resetMonitorElements(const DQMModule *const pModule, DQMResetPolicy policy);

	/** Reset all the monitor elements of this module
	 */
	static StatusCode resetMonitorElements(const DQMModule *const pModule);

//	/** Archive the current state of this module.
//	 *
//	 *  Simply write the directory structure with the monitor elements
//	 *  in a root file
//	 */
//	static StatusCode archive(DQMModule *const pModule, DQMArchiver *pArchiver);

private:
	/** Book a monitor element from the xml element
	 */
	static StatusCode bookMonitorElement(const DQMModule *const pModule, const TiXmlElement *const pXmlElement, DQMMonitorElement *&pMonitorElement);

	friend class DQMXmlHelper;
};

//-------------------------------------------------------------------------------------------------

} 

#endif  //  DQMMODULEAPI_H
