  /// \file DQMEventStreamer.h
/*
 *
 * DQMEventStreamer.h header template automatically generated by a class generator
 * Creation date : mar. dï¿½c. 15 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMEVENTSTREAMER_H
#define DQMEVENTSTREAMER_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMStreamer.h"
#include "dqm4hep/DQMPlugin.h"

namespace dqm4hep
{

/** DQMEventStreamer class
 */
class DQMEventStreamer : public DQMStreamer<DQMEvent>
{
public:
	/** Destructor
	 */
	virtual ~DQMEventStreamer();

	/** Serialize a DQMEvent object and store it in the data stream
	 */
	virtual StatusCode serialize(const DQMEvent *const pObject, DQMDataStream *const pDataStream) const = 0;

	/** De-serialize a DQMEvent given from the data stream
	 */
	virtual StatusCode deserialize(DQMEvent *&pObject, DQMDataStream *const pDataStream) const = 0;

	/** Serialize a part of a DQMEvent object identified by the reg exp 'subEventIdentifier' and store it in the data stream
	 *
	 *  Example : subEventIdentifier = "MyCollection1:MyCollection2"
	 *            subEventIdentifier = "*TpcCollection"
	 *
	 *  The identifier decoding has to be performed by the user, based on the event contents itself
	 */
	virtual StatusCode serialize(const DQMEvent *const pObject, const std::string &subEventIdentifier, DQMDataStream *const pDataStream) const = 0;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMEventStreamerPlugin : public DQMEventStreamer, public DQMPlugin
{
public:
	/** Constructor
	 */
	DQMEventStreamerPlugin(const std::string &pluginName);

	/** Destructor
	 */
	virtual ~DQMEventStreamerPlugin();
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

inline DQMEventStreamer::~DQMEventStreamer()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

inline DQMEventStreamerPlugin::DQMEventStreamerPlugin(const std::string &pluginName) :
		DQMPlugin(pluginName)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

inline DQMEventStreamerPlugin::~DQMEventStreamerPlugin()
{
	/* nop */
}


} 

#endif  //  DQMEVENTSTREAMER_H
