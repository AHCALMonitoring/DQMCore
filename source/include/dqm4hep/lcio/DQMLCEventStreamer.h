  /// \file DQMLCEventStreamer.h
/*
 *
 * DQMLCEventStreamer.h header template automatically generated by a class generator
 * Creation date : jeu. mars 26 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMLCEVENTSTREAMER_H
#define DQMLCEVENTSTREAMER_H

// -- dqm4hep headers
#include "dqm4hep/DQMEvent.h"
#include "dqm4hep/DQMStreamer.h"
#include "dqm4hep/DQMEventStreamer.h"
#include "dqm4hep/DQMStreamable.h"

namespace EVENT { class LCEvent; }
namespace EVENT { class LCGenericObject; }
namespace EVENT { class LCObject; }
namespace EVENT { class LCParameters; }
namespace EVENT { class LCCollection; }

namespace dqm4hep
{

class DQMDataStream;
class DQMLCCollectionStreamer;
class DQMLCParametersStreamer;

typedef DQMStreamer<EVENT::LCObject> DQMLCObjectStreamer;
typedef std::map<const std::string, DQMLCCollectionStreamer *> DQMLCCollectionStreamerMap;

/** DQMLCParametersStreamer class
 */
class DQMLCParametersStreamer : public DQMStreamer<EVENT::LCParameters>
{
public:
	/** Serialize the LCParameters in dataStream
	 */
	StatusCode serialize(const EVENT::LCParameters *const pLCarameters, DQMDataStream *const pDataStream) const;

	/** Deserialize the LCParameters from dataStream
	 */
	StatusCode deserialize(EVENT::LCParameters *&pLCParameters, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMLCEventStreamer class
 */ 
class DQMLCEventStreamer : public DQMEventStreamerPlugin
{
 public:
	/** Constructor
	 */
	DQMLCEventStreamer();

	/** Destructor
	 */
	~DQMLCEventStreamer();

	/** Serialize the event and store it into a data stream.
	 */
	StatusCode serialize(const DQMEvent *const pEvent, DQMDataStream *const pDataStream) const;

	/** De-serialize the lcio event.
	 */
	StatusCode deserialize(DQMEvent *&pEvent, DQMDataStream *const pDataStream) const;

	/** Serialize the a part of the event and store it into a data stream.
	 *
	 *  The sub event identifier is a string of the collection names
	 *  concatenated with semi columns : "collectionName1:collectionName2:collectionName3"
	 *  If the sub event identifier is empty the whole event is serialized
	 */
	StatusCode serialize(const DQMEvent *const pObject, const std::string &subEventIdentifier, DQMDataStream *const pDataStream) const;

	/** Clone the lcio streamer
	 */
	DQMPlugin *clone() const;

private:

	DQMLCCollectionStreamerMap           m_lcCollectionStreamerMap;
	DQMLCParametersStreamer              m_lcParametersStreamer;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMLCCollectionStreamer class.
 */
class DQMLCCollectionStreamer : public DQMStreamer<EVENT::LCCollection>
{
public:
	/** Constructor with a lc object streamer
	 */
	DQMLCCollectionStreamer(const std::string &collectionType, DQMLCObjectStreamer *pLCObjectStreamer);

	/** Destructor
	 */
	~DQMLCCollectionStreamer();

	/** Serialize an LCCollection
	 */
	StatusCode serialize(const EVENT::LCCollection *const pLCCollection, DQMDataStream *const pDataStream) const;

	/** Deserialize an LCCollection. The collection must be allocated in this function
	 */
	StatusCode deserialize(EVENT::LCCollection *&pLCCollection, DQMDataStream *const pDataStream) const;

protected:

	const std::string           m_collectionType;
	DQMLCObjectStreamer         *m_pLCObjectStreamer;
	DQMLCParametersStreamer      m_lcParametersStreamer;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMLCGenericObjectStreamer class
 */
class DQMLCGenericObjectStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize an LCGenericObject
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a LCGenericObject. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMCalorimeterHitStreamer class
 */
class DQMCalorimeterHitStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize an CalorimeterHit
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a CalorimeterHit. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMRawCalorimeterHitStreamer class
 */
class DQMRawCalorimeterHitStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize an RawCalorimeterHit
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a RawCalorimeterHit. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMTPCHitStreamer class
 */
class DQMTPCHitStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize a TPCHit
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a TPCHit. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMClusterStreamer class
 */
class DQMClusterStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize an Cluster
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a Cluster. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMParticleIDStreamer class
 */
class DQMParticleIDStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize an ParticleID
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a ParticleID. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMLCFloatVecStreamer class
 */
class DQMLCFloatVecStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize a LCFloatVec
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a LCFloatVec. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMLCIntVecStreamer class
 */
class DQMLCIntVecStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize a LCIntVec
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a LCIntVec. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMLCStrVecStreamer class
 */
class DQMLCStrVecStreamer : public DQMLCObjectStreamer
{
public:
	/** Serialize a LCStrVec
	 */
	StatusCode serialize(const EVENT::LCObject *const pLCObject, DQMDataStream *const pDataStream) const;

	/** Deserialize a LCStrVec. The object is allocated in this function
	 */
	StatusCode deserialize(EVENT::LCObject *&pLCObject, DQMDataStream *const pDataStream) const;
};

} 

#endif  //  DQMLCEVENTSTREAMER_H
