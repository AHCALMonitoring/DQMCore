  /// \file DQMLCEvent.h
/*
 *
 * DQMLCEvent.h header template automatically generated by a class generator
 * Creation date : sam. mai 30 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMLCEVENT_H
#define DQMLCEVENT_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMEvent.h"

// -- lcio headers
#include "EVENT/LCEvent.h"

namespace dqm4hep
{

/** DQMLCEvent class.
 *
 *  Wrapper for LCEvent class to be used in DQM system.
 *  Used in DQMAnalysisModule::processEvent(DQMEvent) to monitor event.
 *  See DQMAnalysisModule on how to process it in the DQM system framework
 */ 
class DQMLCEvent : public DQMEventBase<EVENT::LCEvent>
{
public:
	/** Constructor
	 */
	DQMLCEvent();

	/** Destructor
	 */
	~DQMLCEvent();

	/** Returns the stored lc event
	 */
	EVENT::LCEvent *getEvent() const;

	/** Set the handled lc event
	 */
	void setEvent(EVENT::LCEvent *pLCEvent);

	/** Clear the handler by deleting the handled lc event
	 */
	void clear();

private:
	EVENT::LCEvent           *m_pLCEvent;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

inline DQMLCEvent::DQMLCEvent() :
		m_pLCEvent(0)
{
}

//-------------------------------------------------------------------------------------------------

inline DQMLCEvent::~DQMLCEvent()
{
	clear();
}

//-------------------------------------------------------------------------------------------------

inline EVENT::LCEvent *DQMLCEvent::getEvent() const
{
	return m_pLCEvent;
}

//-------------------------------------------------------------------------------------------------

inline void DQMLCEvent::setEvent(EVENT::LCEvent *pLCEvent)
{
	clear();
	m_pLCEvent = pLCEvent;
}

//-------------------------------------------------------------------------------------------------

inline void DQMLCEvent::clear()
{
	if(0 != m_pLCEvent && this->isOwner())
		delete m_pLCEvent;
}

} 

#endif  //  DQMLCEVENT_H
