/*
 *
 * DQMMonitorElementSender.h header template automatically generated by a class generator
 * Creation date : sam. mai 9 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORELEMENTSENDER_H
#define DQMMONITORELEMENTSENDER_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMDataStream.h"
#include "dqm4hep/DQMMessaging.h"

#include "dic.hxx"

namespace dqm4hep
{

class DQMModuleApi;
class DQMModuleApplication;

/** DQMMonitorElementSender class
 */ 
class DQMMonitorElementSender : public DimClient
{
	friend class DQMModuleApi;
public:
	/** Constructor
	 */
	DQMMonitorElementSender(DQMModuleApplication *pApplication);

	/** Destructor
	 */
	~DQMMonitorElementSender();

	/** Set the collector name to which the elements will be sent
	 */
	StatusCode setCollectorName(const std::string &collectorName);

	/** Send the subscribed monitor element to the collector
	 */
	StatusCode sendMonitorElements();

	/** Connect the sender to the collector
	 */
	StatusCode connectToService();

	/** Disconnect the sender to the collector
	 */
	StatusCode disconnectFromService();

	/** Whether the sender is connected to the collector
	 */
	bool isConnectedToService() const;

private:
	/**
	 */
	void infoHandler();

	/**
	 */
	void addAvailableMonitorElement(DQMMonitorElement *pMonitorElement);

	/**
	 */
	void removeAvailableMonitorElement(const std::string &monitorElementName);

	/**
	 */
	void sendAvailableMonitorElementList();

private:
	typedef std::map<std::string, DQMMonitorElementInfo> DQMMonitorElementInfoMap;

	// from ui
	DQMModuleApplication          *m_pApplication;           ///< The module application that sends elements to the collector
	std::string                    m_collectorName;          ///<  The collector name to which the monitor elements will be sent

	DQMDataStream                  m_dataStream;             ///< The data stream used to serialize the monitor elements
	DQMDataStream                  m_inDataStream;           ///< The data stream used to serialize dim info

	// internal
	StringSet                      m_subscribedMeList;      ///< The subscribed monitor element list
	DQMMonitorElementInfoMap       m_availableMeMap;        ///< The available monitor element list
	pthread_mutex_t                m_mutex;                 ///< Mutex to lock unlock on service update
	bool                           m_sendAvailableMeList;   ///< Whether the list of available me has to be re-sent to the collector
	bool                           m_isConnected;           ///< Whether the sender is connected to the collector

	DimUpdatedInfo                *m_pSubscribedListInfo;   ///< The dim info to receive subscribed me list from collector
	DimUpdatedInfo                *m_pCollectorStateInfo;   ///< The dim info to receive when the collector state changes
};

} 

#endif  //  DQMMONITORELEMENTSENDER_H
