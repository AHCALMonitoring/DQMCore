  /// \file DQMPerformance.h
/*
 *
 * DQMPerformance.h header template automatically generated by a class generator
 * Creation date : mar. janv. 26 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMPERFORMANCE_H
#define DQMPERFORMANCE_H

// -- dim headers
#include "dis.hxx"
#include "dic.hxx"

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- root headers
#include "TH1F.h"

namespace dqm4hep
{

class DQMPerformanceManager;

/** DQMPerformanceService class
 */
class DQMPerformanceService : public DimService
{
public:
	/** Constructor
	 */
	DQMPerformanceService(const std::string &varName, float &var);
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMPerformanceInfo : public DimInfo
{
public:
	/** Constructor
	 */
	DQMPerformanceInfo(DQMPerformanceManager *pPerformanceManager, const std::string &varName, float nolink);

	/** Get the variable name
	 */
	const std::string &getVarName() const;

private:
	/** The dim info handler
	 */
	void infoHandler();

private:
	DQMPerformanceManager       *m_pPerformanceManager;
	std::string                  m_varName;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMPerformanceManager : public DimClient
{
public:
	/** Constructor
	 */
	DQMPerformanceManager();

	/** Destructor
	 */
	virtual ~DQMPerformanceManager();

	/** Clear the info list
	 */
	void clear();

	/** Create the histograms from the received performance contents.
	 *  Keys are the variable names, values are the histograms
	 */
	std::map<std::string, TH1F *> createHistograms();

	/** Print current contents stats
	 */
	void printStats() const;

protected:
	/** Handle dim call back performance info
	 */
	virtual void handlePerformance(DQMPerformanceInfo *pInfo);

private:
	/** Scan available performance info over the network
	 */
	void scanPerformanceInfo();

	/** Dim client info handler
	 */
	void infoHandler();

private:
	std::map<std::string, DQMPerformanceInfo *>     m_performanceInfoMap;
	std::map<std::string, std::vector<float> >      m_performanceContentsMap;

	friend class DQMPerformanceInfo;
};

} 

#endif  //  DQMPERFORMANCE_H
