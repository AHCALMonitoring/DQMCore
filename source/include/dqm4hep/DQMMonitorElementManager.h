  /// \file DQMMonitorElementManager.h
/*
 *
 * DQMMonitorElementManager.h header template automatically generated by a class generator
 * Creation date : lun. aoï¿½t 17 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORELEMENTMANAGER_H
#define DQMMONITORELEMENTMANAGER_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMXmlHelper.h"

// -- root headers
#include "TObject.h"

namespace dqm4hep
{

class DQMStorage;
class DQMArchiver;
class DQMMonitorElement;
class DQMQualityTest;
class DQMQualityTestFactory;

/** DQMMonitorElementManager class
 */
class DQMMonitorElementManager 
{
	friend class DQMArchiver;

	typedef std::map<const std::string, DQMQualityTest *> DQMQualityTestMap;
	typedef std::map<const std::string, const DQMQualityTestFactory *> DQMQualityTestFactoryMap;

public:
	/** Constructor
	 */
	DQMMonitorElementManager();

	/**
	* @brief Dtor
	*/
	~DQMMonitorElementManager();

//	/** Read the settings for quality tests and initialized them.
//	 *
//	 *  Create the quality tests which
//	 *  must be registered before calling this method
//	 */
//	StatusCode readSettings(const TiXmlHandle xmlHandle);

 	/////////////////////////
 	// DIRECTORY INTERFACE //
 	/////////////////////////

 	/** Go back to root directory
 	 */
 	void cd();

 	/** Go to directory 'dirName'
 	 */
 	StatusCode cd(const std::string &dirName);

 	/** Create the directory 'dirName'
 	 */
 	StatusCode mkdir(const std::string &dirName);

 	/** List the current directory content
 	 */
 	void ls(bool recursive = false);

 	/** Get the current directory name
 	 */
 	const std::string &pwd();

 	/** Navigate backward in the directory structure
 	 */
 	StatusCode goUp();

 	/** Remove the directory 'dirName'
 	 */
 	StatusCode rmdir(const std::string &dirName);

 	/** Get the current directory name (always defined)
 	 */
 	const std::string &getCurrentDirectoryName() const;

 	/** Get the current directory full path name (always defined)
 	 */
 	DQMPath getCurrentDirectoryFullPathName() const;

 	/** Get the full path name of the sub directory
 	 */
 	StatusCode getFullPathName(const std::string &subDirName, DQMPath &fullPathName) const;

 public:

 	///////////////////////
 	// BOOKING INTERFACE //
 	///////////////////////

 	/** Book a 1D float histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookRealHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 1D integer histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookIntHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 1D char histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookCharHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 1D short histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookShortHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 2D float histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookRealHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			int nXBins, float xMin, float xMax,
 			int nYBins, float yMin, float yMax);

 	/** Book a 2D integer histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookIntHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			int nXBins, float xMin, float xMax,
 			int nYBins, float yMin, float yMax);

 	/** Book a 2D char histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookCharHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			int nXBins, float xMin, float xMax,
 			int nYBins, float yMin, float yMax);

 	/** Book a 2D short histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookShortHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			int nXBins, float xMin, float xMax,
 			int nYBins, float yMin, float yMax);

 	/** Book a 1D profile. The profile is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookProfile1D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			int nXBins, float xMin, float xMax, float yMin, float yMax);

 	/** Book a 2D profile. The profile is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookProfile2D(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			int nXBins, float xMin, float xMax,
 			int nYBins, float yMin, float yMax,
 			float zMin, float zMax);

 	/** Book an integer scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookInt(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, const int &value);

 	/** Book a float scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookFloat(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, const float &value);

 	/** Book a short scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookShort(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, const short &value);

 	/** Book a std::string scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  and added to monitor element list of the module.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookString(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName, const std::string &value);

 	/** Book a generic TObject. The TObject must be valid and must be a built-in ROOT object or
 	 *  a user defined class inheriting from TObject and providing a dictionary.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookObject(DQMMonitorElement *&pMonitorElement, const std::string &name, const std::string &title, const std::string &moduleName,
 			TObject *pROOTObject);



 	/** Book a 1D float histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookRealHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 1D integer histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookIntHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 1D char histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookCharHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 1D short histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookShortHistogram1D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nBins, float minimum, float maximum);

 	/** Book a 2D float histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookRealHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nXBins, float xMin, float xMax, int nYBins, float yMin, float yMax);

 	/** Book a 2D integer histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookIntHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nXBins, float xMin, float xMax, int nYBins, float yMin, float yMax);

 	/** Book a 2D char histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookCharHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nXBins, float xMin, float xMax, int nYBins, float yMin, float yMax);

 	/** Book a 2D short histogram. The histogram is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookShortHistogram2D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nXBins, float xMin, float xMax, int nYBins, float yMin, float yMax);

 	/** Book a 1D profile. The profile is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookProfile1D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nXBins, float xMin, float xMax, float yMin, float yMax);

 	/** Book a 2D profile. The profile is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookProfile2D(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, int nXBins, float xMin, float xMax, int nYBins, float yMin, float yMax, float zMin, float zMax);

 	/** Book an integer scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookInt(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, const int &value);

 	/** Book a float scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookFloat(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, const float &value);

 	/** Book a short scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookShort(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, const short &value);

 	/** Book a std::string scalar element. The scalar is encapsulated in the DQMMonitorElement
 	 *  Such a function should be used in DQMModule implementation
 	 */
 	StatusCode bookString(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, const std::string &value);

 	/** Book a generic TObject. The TObject must be valid and must be a built-in ROOT object or
 	 *  a user defined class inheriting from TObject and providing a dictionary.
 	 *  Such a function should be used in DQMModule implementation by passing 'this' as first argument
 	 */
 	StatusCode bookObject(DQMMonitorElement *&pMonitorElement, const std::string &directory, const std::string &name, const std::string &title,
 			const std::string &moduleName, TObject *pROOTObject);



 	/** Book a monitor element from the xml element
 	 */
 	StatusCode bookMonitorElement(const TiXmlElement *const pXmlElement, const std::string &moduleName, DQMMonitorElement *&pMonitorElement);

 	///////////////////////
 	// GETTERS INTERFACE //
 	///////////////////////

 	/** Get all the monitor elements already booked by this module in all the directories
 	 */
 	StatusCode getAllMonitorElements(std::vector<DQMMonitorElement*> &monitorElementList) const;

 	/** Get the monitor element in the current directory (result by ptr reference)
 	 */
 	StatusCode getMonitorElement(const std::string &monitorElementName, DQMMonitorElement *&pMonitorElement) const;

 	/** Get the monitor element in the given directory (result by ptr reference)
 	 */
 	StatusCode getMonitorElement(const std::string &dirName, const std::string &monitorElementName, DQMMonitorElement *&pMonitorElement) const;

 	/** Get the monitor element in the current directory.
 	 *  The element is directly returned without any ptr check
 	 */
 	DQMMonitorElement *getMonitorElement(const std::string &monitorElementName) const;

 	/** Get the monitor element in the given directory.
 	 *  The element is directly returned without any ptr check
 	 */
 	DQMMonitorElement *getMonitorElement(const std::string &dirName, const std::string &monitorElementName) const;


 	////////////////////////
 	// DELETION INTERFACE //
 	////////////////////////

 	/** Delete the monitor element (by element ptr)
 	 */
 	StatusCode deleteMonitorElement(DQMMonitorElement *pMonitorElement);

 	/** Delete the monitor element (by element name)
 	 */
 	StatusCode deleteMonitorElement(const std::string &dirName, const std::string &monitorElement);

 public:

 	////////////////////////////
 	// QUALITY TEST INTERFACE //
 	////////////////////////////

 	/** Register a new quality test.
 	 *  Ownership transfered to the manager.
 	 */
 	StatusCode registerQualityTestFactory(const std::string &qualityTestType, const DQMQualityTestFactory *const pQualityTestFactory);

 	/** Create a quality test from the xml element.
 	 *  The xml element must contain the attribute 'type' and 'name'
 	 */
 	StatusCode createQualityTest(TiXmlElement *const pXmlElement);

 	/** Add a quality test to a given monitor element.
 	 *
 	 *  The quality test must have been registered in the framework before
 	 *  calling this method.
 	 */
 	StatusCode addQualityTest(DQMMonitorElement *pMonitorElement, const std::string &qualityTestName) const;

 	/** Remove a specific quality test attached to this monitor element
 	 */
 	StatusCode removeQualityTest(DQMMonitorElement *pMonitorElement, const std::string &qualityTestName);

 	/** Remove all quality tests attached to this monitor element
 	 */
 	StatusCode removeQualityTests(DQMMonitorElement *pMonitorElement);

 	/** Run all the quality test attached to this monitor element
 	 */
 	StatusCode runQualityTests(DQMMonitorElement *pMonitorElement);

 	/** Run a specific quality test attached to this monitor element
 	 */
 	StatusCode runQualityTest(DQMMonitorElement *pMonitorElement, const std::string &qualityTestName);

 	/** Run all the quality test of all the monitor elements
 	 */
 	StatusCode runQualityTests();

 	/** Get all the quality test results
 	 */
 	StatusCode getQualityTestResults(DQMQualityTestResultMap &results) const;

 private:

 	/**
 	 */
 	StatusCode getQualityTest(const std::string &qualityTestName, DQMQualityTest *&pQualityTest) const;

 	/**
 	 */
 	StatusCode runQualityTests(const DQMMonitorElementList &monitorElementList);

// 	/**
// 	 */
// 	StatusCode createQualityTest(const std::string &type, const std::string &name, DQMQualityTest *&pQualityTest) const;

 public:

 	////////////////////////
 	// UITILITY FUNCTIONS //
 	////////////////////////

 	/** Reset all the monitor elements that have the given reset policy
 	 */
 	StatusCode resetMonitorElements(DQMResetPolicy policy) const;

 	/** Reset all the monitor elements of this module
 	 */
 	StatusCode resetMonitorElements() const;

 	/** Get the monitor element list for which the flag "setToPublish" is true
 	 */
 	StatusCode getMonitorElementListToPublish(DQMMonitorElementList &monitorElementList) const;

 private:

 	/** Get the monitor element storage
 	 */
 	DQMStorage *getStorage() const;

 	DQMStorage                       *m_pMonitorElementStorage;
 	DQMQualityTestFactoryMap          m_qualityTestFactoryMap;
 	DQMQualityTestMap                 m_qualityTestMap;
};

} 

#endif  //  DQMMONITORELEMENTMANAGER_H
