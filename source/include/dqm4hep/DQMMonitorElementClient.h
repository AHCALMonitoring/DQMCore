/*
 *
 * DQMMonitorElementClient.h header template automatically generated by a class generator
 * Creation date : dim. mai 10 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORELEMENTCLIENT_H
#define DQMMONITORELEMENTCLIENT_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMMessaging.h"

// -- dim headers
#include "dic.hxx"

namespace dqm4hep
{

class DQMMonitorElementClient;

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMMonitorElementCollectorInfoRpcInfo : public DimRpcInfo
{
public:
	DQMMonitorElementCollectorInfoRpcInfo(char *rpcInfoName, DQMMonitorElementClient *pClient);
	void rpcInfoHandler();

private:
	DQMMonitorElementClient      *m_pClient;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMMonitorElementListNameRpcInfo : public DimRpcInfo
{
public:
	DQMMonitorElementListNameRpcInfo(char *rpcInfoName, DQMMonitorElementClient *pClient);
	void rpcInfoHandler();

private:
	DQMMonitorElementClient      *m_pClient;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMMonitorElementPacketRpcInfo : public DimRpcInfo
{
public:
	DQMMonitorElementPacketRpcInfo(char *rpcInfoName, DQMMonitorElementClient *pClient);
	void rpcInfoHandler();

private:
	DQMMonitorElementClient      *m_pClient;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMMonitorElementClient class
 */ 
class DQMMonitorElementClient
{
public:
	/** Handler class
	 */
	class Handler
	{
	public:
		/** Destructor
		 */
		virtual ~Handler();

		/** Call back function to receive collector info.
		 *  Warning !! This function is called from an other thread.
		 *  Use locks to avoid data race conditions
		 */
		virtual StatusCode receiveCollectorInfo(DQMMonitorElementClient *pClient, const DQMCollectorInfo &collectorInfo) = 0;

		/** Call back function to receive monitor element info list
		 *  Warning !! This function is called from an other thread.
		 *  Use locks to avoid data race conditions
		 */
		virtual StatusCode receiveMonitorElementNameList(DQMMonitorElementClient *pClient, const DQMMonitorElementInfoList &infoList) = 0;

		/** Call back function to receive monitor element publication (real monitor element list)
		 *  Warning !! This function is called from an other thread.
		 *  Use locks to avoid data race conditions
		 */
		virtual StatusCode receiveMonitorElementPublication(DQMMonitorElementClient *pClient, const DQMMonitorElementPublication &publication) = 0;

		/** Call back function called when the client is connected
		 */
		virtual StatusCode handleClientConnection(DQMMonitorElementClient *pClient) = 0;

		/** Call back function called when the client is disconnected
		 */
		virtual StatusCode handleClientDisconnection(DQMMonitorElementClient *pClient) = 0;
	};

	/** Constructor
	 */
	DQMMonitorElementClient();

	/** Destructor
	 */
	virtual ~DQMMonitorElementClient();

	/** Set the collector name. Can be done only if the client is
	 *  not yet connected to collector service
	 */
	virtual StatusCode setCollectorName(const std::string &collectorName);

	/** Get the collector name
	 */
	virtual const std::string &getCollectorName() const;

	/** Connect the client to the service
	 */
	virtual StatusCode connectToService();

	/** Disconnect the client from the service
	 */
	virtual StatusCode disconnectFromService();

	/** Whether the client is connected to the service
	 */
	virtual bool isConnectedToService() const;

	/** Set the client handler
	 */
	virtual StatusCode setHandler(Handler *pHandler);

	/** Sent a request to the collector to get back the collector informations
	 */
	virtual StatusCode sendCollectorInfoRequest();

	/** Send a request to get back monitor element list name (small packet info)
	 */
	virtual StatusCode sendMonitorElementListNameRequest(const DQMMonitorElementListNameRequest &request);

	/** Send a request to get back a monitor element publication (huge packet of elements)
	 */
	virtual StatusCode sendMonitorElementPublicationRequest(const DQMMonitorElementRequest &request);

public:
	static const std::string         m_emptyBufferStr;

protected:
	DQMMonitorElementCollectorInfoRpcInfo *m_pMonitorElementCollectorInfoRpcInfo;
	DQMMonitorElementListNameRpcInfo      *m_pMonitorElementListNameRpcInfo;
	DQMMonitorElementPacketRpcInfo        *m_pMonitorElementPacketRpcInfo;

	// collector
	std::string                        m_collectorName;
	bool                              m_isConnected;

	// the user handler
	Handler                           *m_pHandler;

	friend class DQMMonitorElementCollectorInfoRpcInfo;
	friend class DQMMonitorElementListNameRpcInfo;
	friend class DQMMonitorElementPacketRpcInfo;
};


inline DQMMonitorElementClient::Handler::~Handler()
{
	/* nop */
}

} 

#endif  //  DQMMONITORELEMENTCLIENT_H
