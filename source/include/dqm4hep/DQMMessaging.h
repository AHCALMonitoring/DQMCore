  /// \file DQMMessaging.h
/*
 *
 * DQMMessaging.h header template automatically generated by a class generator
 * Creation date : lun. aoï¿½t 17 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMESSAGING_H
#define DQMMESSAGING_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMStreamable.h"

namespace dqm4hep
{

/** DQMMonitorElementPublication class
 */
class DQMMonitorElementPublication : public DQMStreamable
{
public:
	typedef std::map<std::string, std::vector<DQMMonitorElement *> > PublicationMap;
	PublicationMap     m_publication;

	/** Serialize a monitor element publication and store it in the data stream
	 */
	StatusCode serialize(DQMDataStream *const pDataStream) const;

	/** De-serialize a monitor element publication from the data stream
	 */
	StatusCode deserialize(DQMDataStream *const pDataStream);
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMMonitorElementInfo class
 *  Short summary of a DQMMonitorElement that is sent through the network
 */
class DQMMonitorElementInfo : public DQMStreamable
{
public:
	/** Serialize a monitor element publication and store it in the data stream
	 */
	StatusCode serialize(DQMDataStream *const pDataStream) const;

	/** De-serialize a monitor element publication from the data stream
	 */
	StatusCode deserialize(DQMDataStream *const pDataStream);

public:
	std::string                 m_moduleName;
	std::string                 m_monitorElementFullPath;
	std::string                 m_monitorElementType;
	std::string                 m_monitorElementName;
	std::string                 m_monitorElementDescription;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

class DQMMonitorElementInfoList : public std::vector<DQMMonitorElementInfo>
{
public:
	/** Serialize a monitor element publication and store it in the data stream
	 */
	StatusCode serialize(DQMDataStream *const pDataStream) const;

	/** De-serialize a monitor element publication from the data stream
	 */
	StatusCode deserialize(DQMDataStream *const pDataStream);
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMCollectorInfo class
 */
class DQMCollectorInfo : public DQMStreamable
{
public:
	/** Serialize collector infos and store it in the data stream
	 */
	StatusCode serialize(DQMDataStream *const pDataStream) const;

	/** De-serialize collector infos from the data stream
	 */
	StatusCode deserialize(DQMDataStream *const pDataStream);

public:
	std::string                             m_systemName;
	std::string                             m_nodeName;
	std::string                             m_release;
	std::string                             m_version;
	std::string                             m_machine;
	std::string                             m_hostName;
	std::vector<std::string>                m_moduleListName;

	DQMCollectorInfo &operator =(const DQMCollectorInfo &collectorInfo)
	{
		m_systemName = collectorInfo.m_systemName;
		m_nodeName = collectorInfo.m_nodeName;
		m_release = collectorInfo.m_release;
		m_version = collectorInfo.m_version;
		m_machine = collectorInfo.m_machine;
		m_hostName = collectorInfo.m_hostName;
		m_moduleListName = collectorInfo.m_moduleListName;

		return *this;
	}
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMMonitorElementListNameRequest class
 */
class DQMMonitorElementListNameRequest : public DQMStreamable
{
public:
	/** Serialize a monitor element list name request and store it in the data stream
	 */
	StatusCode serialize(DQMDataStream *const pDataStream) const;

	/** De-serialize a monitor element list name request from the data stream
	 */
	StatusCode deserialize(DQMDataStream *const pDataStream);

public:
	std::string                              m_moduleName;
	std::string                              m_monitorElementName;
	std::string                              m_detectorName;
	DQMMonitorElementType                    m_monitorElementType;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMMonitorElementRequest class
 */
class DQMMonitorElementRequest : public DQMStreamable
{
public:
	/** Serialize a monitor element request and store it in the data stream
	 */
	StatusCode serialize(DQMDataStream *const pDataStream) const;

	/** De-serialize a monitor element request from the data stream
	 */
	StatusCode deserialize(DQMDataStream *const pDataStream);

public:
	typedef std::pair<std::string, std::string> ModuleMonitorElementPair;
	std::vector<ModuleMonitorElementPair>         m_requestList;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** ME_REQUEST_COMPARE struct
 */
struct ME_REQUEST_COMPARE
{
public:
	ME_REQUEST_COMPARE(const std::string &s) : m_str(s) {}

	bool operator ()(const DQMMonitorElementRequest::ModuleMonitorElementPair &p)
	{
		if(p.first == m_str)
			return true;
		else
			return false;
	}

private:
	std::string       m_str;
};

} 

#endif  //  DQMMESSAGING_H
