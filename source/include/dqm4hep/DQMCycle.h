  /// \file DQMCycle.h
/*
 *
 * DQMCycle.h header template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMCYCLE_H
#define DQMCYCLE_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

namespace dqm4hep
{

class DQMDataClient;
class DQMModuleApplication;
class DQMModule;

/** DQMCycle class.
 *
 *  Process a cycle of processEvent(evt) call for a DQMAnalysisModule.
 *  See implementation for cycle types.
 *
 *  The cycle value is the value for which the cycle should normally ends.
 *
 *  The timeout value is the maximum time between two processEvent(evt) call
 *  When the timeout is reached, the cycle ends. The default timeout value
 *  is 10 seconds and can be changed via the method setTimeout(secs)
 */
class DQMCycle
{
public:
	/** Constructor
	 */
	DQMCycle();

	/** Destructor
	 */
	virtual ~DQMCycle();

	/** Get the cycle value (time, nb of events, event size)
	 */
	float getCycleValue() const;

	/** Set the cycle value
	 */
	void setCycleValue(float value);

	/** Get the cycle timeout (in seconds)
	 *  Maximum time between two processEvent(evt) call.
	 *  When the timeout is reached, the cycle ends
	 */
	unsigned int getTimeout() const;

	/** Get the timeout
	 */
	void setTimeout(unsigned int);

	/** Set the application in which the cycle is running
	 */
	void setModuleApplication(DQMModuleApplication *pApplication);

	/** Get the application in which the cycle is registered
	 */
	DQMModuleApplication *getModuleApplication() const;

	/** Get the processing rate. May be called after a processCycle()
	 *  to get the correct value
	 */
	float getProcessingRate() const;

	/** Process a cycle
	 */
	virtual StatusCode processCycle() = 0;

protected:
	DQMModuleApplication            *m_pApplication;
	float                            m_processingRate;
	float                            m_cycleValue;
	unsigned int                     m_cycleTimeout;
};

} 

#endif  //  DQMCYCLE_H
