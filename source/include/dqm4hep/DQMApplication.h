  /// \file DQMApplication.h
/*
 *
 * DQMApplication.h header template automatically generated by a class generator
 * Creation date : mer. juin 17 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMAPPLICATION_H
#define DQMAPPLICATION_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMPlugin.h"

namespace dqm4hep
{

/** DQMApplication class
 */ 
class DQMApplication 
{
public:
	/** Destructor
	 */
	virtual ~DQMApplication() {}

	/** Run the application
	 */
	virtual StatusCode run() = 0;

	/** Stop the application
	 */
	virtual StatusCode exit( int returnCode ) = 0;

	/** Read the settings from file
	 */
	virtual StatusCode readSettings( const std::string &settingsFile ) = 0;

	/** Get the application type
	 */
	virtual const std::string &getType() const = 0;

	/** Get the application name
	 */
	virtual const std::string &getName() const = 0;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMApplicationPlugin class
 */
class DQMApplicationPlugin : public DQMPlugin, public DQMApplication
{
public:
	/** Constructor
	 */
	DQMApplicationPlugin(const std::string &pluginName);

	/** Destructor
	 */
	virtual ~DQMApplicationPlugin();
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

inline DQMApplicationPlugin::DQMApplicationPlugin(const std::string &pluginName) :
		DQMPlugin(pluginName)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

inline DQMApplicationPlugin::~DQMApplicationPlugin()
{
	/* nop */
}

} 

#endif  //  DQMAPPLICATION_H
