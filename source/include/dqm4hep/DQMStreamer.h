  /// \file DQMStreamer.h
/*
 *
 * DQMStreamer.h header template automatically generated by a class generator
 * Creation date : sam. mars 28 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMSTREAMER_H
#define DQMSTREAMER_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

namespace dqm4hep
{

class DQMDataStream;

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMStreamer interface.
 *  Helper interface to stream a particular object in a data stream
 */
template <typename T>
class DQMStreamer
{
public:
	/** Destructor
	 */
	virtual ~DQMStreamer();

	/** Serialize a given object and store it in the data stream
	 */
	virtual StatusCode serialize(const T *const pObject, DQMDataStream *const pDataStream) const = 0;

	/** De-serialize a given from the data stream
	 */
	virtual StatusCode deserialize(T *&pObject, DQMDataStream *const pDataStream) const = 0;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

template <typename T>
inline DQMStreamer<T>::~DQMStreamer()
{
	/* nop */
}

}

#endif  //  DQMSTREAMER_H
